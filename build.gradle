buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
    }
}

apply plugin: 'idea'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

group "${projGroupId}"
version "${projVersion}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

allprojects {
    group "${projGroupId}"
    version "${projVersion}"
    wrapper {
        distributionUrl "${gradleDistributionUrl}"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

jar {
    baseName = "${projArtifactId}"
    version = "${projVersion}"
    exclude("*.properties")
}

dependencies {
    compile group: 'org.springframework', name: 'spring-web', version: '5.2.5.RELEASE'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'
    compileOnly("org.projectlombok:lombok:1.18.12")
    annotationProcessor("org.projectlombok:lombok:1.18.12")
    testCompileOnly("org.projectlombok:lombok:1.18.12")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.12")
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    compile group: 'com.google.guava', name: 'guava', version: '23.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.awaitility', name: 'awaitility', version: '4.0.2'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.20'
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.1'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.1'
    testCompile("org.assertj:assertj-core:3.15.0")
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'
    testCompile group: 'org.springframework', name: 'spring-test', version: '5.2.5.RELEASE'
}

artifacts {
    archives file("${buildDir}/libs/${project.name}-${project.version}.jar")
}

signing {
    sign configurations.archives
}

uploadArchives {
    def ossrhUsername = System.getenv('ossrhUsername')
    def ossrhPassword = System.getenv('ossrhPassword')
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }
            repository(url: mavenReleaseRepoURL) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: mavenSnapshotRepoURL) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://172.16.238.12:9000"
        property "sonar.projectName", "imi-core-testresult-uploader"
        property "sonar.projectKey", "com.aidenwei.fdns:imi-core-testresult-uploader"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test"
    }
}

jacocoTestReport {
    additionalSourceDirs.from = files(sourceSets.main.allJava.srcDirs)
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
        html.destination file("build/reports/jacoco/test")
    }
    executionData.from = files('build/jacoco/test.exec')
}

test.finalizedBy jacocoTestReport

test {
    systemProperty "server_ip", System.getProperty("server_ip")
    systemProperty "server_user", System.getProperty("server_user")
    useJUnitPlatform()
}